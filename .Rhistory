df_calc_3wet <- process_slope(df_ssn = df_3wet, folder = '_season_3wet', nme = 'wet_3season_chirps')
# Function to use
calc_slope <- function(df, id, folder, nme){
# df <- df_3dry; id <- 1
# Calculate slope
df_sub <- dplyr::filter(df, ID == id)
ts_slp <- ts(data = df_sub$count, start = 1981)
slp <- extract2(df_sub, 3) %>% sens.slope(.)
# Extract values from slope
interval <- slp$conf.int %>% as.numeric()
slp_val  <- slp$estimates %>% as.numeric()
p_val <- slp$p.value
df_values <- data.frame(ID_New = id, intervalo_min = interval[1], intervalo_max = interval[2], slope = slp_val, valor_p = p_val)
# Generate graph
gg <- ggplot(data = df_sub, aes(x = Year, y = count)) +
geom_line() +
xlab('') +
ylab('Number of days without rainfall') +
scale_y_continuous(limits = c(0, 20)) +
scale_x_continuous(breaks = seq(1980, 2016, 5)) +
stat_smooth(method = 'lm', se = TRUE, colour = 'black') +
annotate('text', x = 2005, y = 15, label = paste0('tendency: ', round(df_values[,4], 2), '/year')) +
annotate('text', x = 2005, y = 14, label = paste0('p value: ', round(df_values[,5], 2)))
ggsave(plot = gg, filename = paste0('_png/_graphs/_dly/_drySeason/', folder, '/', nme,  'daysWithout_rainfall_', id, '.png'), width = 9, height = 7, units = 'in', dpi = 300)
return(df_values)
}
process_slope <- function(df_ssn, folder, nme){
# df_ssn <- df_3dry
# nme <- 'dry_3season_chirps'
# Apply function
df_values_all <- lapply(c(1:353), function(x){
df_sub <- filter(df_ssn, ID == x)
if(nrow(df_sub) == 0){
print(paste0('Not done ', x))
} else{
result <- calc_slope(df = df_sub, id = x, folder = folder, nme = nme)
}
})
# Select only the dataframes
df <- lapply(df_values_all, function(df) df_values_all[sapply(df_values_all, is.data.frame)])[[1]]
df <- do.call('rbind', df) %>% tbl_df()
print('To tidy the dataframe')
# Select trend and not trend
df <- df %>% mutate(intervalo_min = round(intervalo_min, 2),
intervalo_max = round(intervalo_max, 2),
slope = round(slope, 2),
valor_p = round(valor_p, 2))
df_noTrend <- filter(df, valor_p >= 0.05)
df_Trend <- filter(df, valor_p < 0.05)
df_1 <- filter(df, ID_New %in% df_noTrend$ID_New) %>% mutate(trndDayDry = 'No')
df_2 <- filter(df, ID_New %in% df_Trend$ID_New)  %>% mutate(trndDayDry = 'Yes')
df <- rbind(df_1, df_2)
df <- right_join(df, coords, by = c('ID_New' = 'ID'))
# df$trndDayDry <- ifelse(is.na(df$trndDayDry), 'No', df$trndDayDry)
shp <- df
# Dataframe to shapefile
coordinates(shp) <- ~ Longitude + Latitude
# Write shapefile
writeOGR(shp, dsn = '_shp/_chirps', layer = nme, driver = 'ESRI Shapefile')
return(shp)
}
# Load data
coords <- read_csv('_data/_csv/occHND_coffee_rmDup_clean.csv') %>% dplyr::select(ID, Longitude, Latitude)
df_3dry <- read_csv('_data/_tbl/_ssnCHIRPS/dry_days_season_3dry.csv')
df_3wet <- read_csv('_data/_tbl/_ssnCHIRPS/dry_days_season_3wet.csv')
# Apply functions
df_calc_3dry <- process_slope(df_ssn = df_3dry, folder = '_season_3dry', nme = 'dry_3season_chirps')
# Apply functions
df_calc_3dry <- process_slope(df_ssn = df_3dry, folder = '_season_3dry', nme = 'dry_3season_chirps')
df_calc_3dry
unique(df_calc_3dry@data$trndDayDry)
df_calc_3wet <- process_slope(df_ssn = df_3wet, folder = '_season_3wet', nme = 'wet_3season_chirps')
df_calc_3dry
df_calc_3wet <- process_slope(df_ssn = df_3wet, folder = '_season_3wet', nme = 'wet_3season_chirps')
df_calc_3wet
writeOGR(df_calc_3wet, dsn = '_shp/_chirps', layer = 'wet_3season_chirps', driver = 'ESRI Shapefile')
unique(df_calc_3wet@data$trndDayDry)
# Load libraries
require(tidyverse)
require(magrittr)
require(ggplot2)
require(trend)
require(sf)
require(stringr)
require(data.table)
setwd('W:/_chirps')
# Initial setup
rm(list = ls())
options(scipen = 999)
cat('\f')
# Function to use
calc_season <- function(df_season, df_dly, id){
# Proof
# df_season <- dfs_3dry
# df_dly <- df_dly
# id <- 1
# Daily
dly <- df_dly %>%
mutate(Month = as.numeric(Month),
Day = as.numeric(Day))
print('To select the season')
# Select by season
ssn <- df_season %>%
filter(ID == id) %>%
extract2(4)
ssn <- season_tb[grep(ssn, season_tb$season, value = F),]
print('To tidy the result')
# Filter and tidy by the season
result <- dly %>%
filter(Month %in% c(extract2(ssn, 2), extract2(ssn, 3), extract2(ssn, 4))) %>%
group_by(Year, ID_5days) %>%
summarize(sum = sum(Value)) %>%
ungroup() %>%
mutate(sum = sum / 10,
ID = id) #the raw values are multiplied by 10
print('Done...!')
return(result)
}
# Load libraries
require(tidyverse)
require(magrittr)
require(ggplot2)
require(trend)
require(sf)
require(stringr)
require(data.table)
# Initial setup
rm(list = ls())
setwd('W:/_chirps')
options(scipen = 999)
cat('\f')
# Function to use
calc_season <- function(df_season, df_dly, id){
# Proof
# df_season <- dfs_3dry
# df_dly <- df_dly
# id <- 1
# Daily
dly <- df_dly %>%
mutate(Month = as.numeric(Month),
Day = as.numeric(Day))
print('To select the season')
# Select by season
ssn <- df_season %>%
filter(ID == id) %>%
extract2(4)
ssn <- season_tb[grep(ssn, season_tb$season, value = F),]
print('To tidy the result')
# Filter and tidy by the season
result <- dly %>%
filter(Month %in% c(extract2(ssn, 2), extract2(ssn, 3), extract2(ssn, 4))) %>%
group_by(Year, ID_5days) %>%
summarize(sum = sum(Value)) %>%
ungroup() %>%
mutate(sum = sum / 10,
ID = id) #the raw values are multiplied by 10
print('Done...!')
return(result)
}
calc_sum_season <- function(df, season_name, val_name){
# Proof
# df <- dfs_all
# season_name <- 'season_3wet'
# val_name <- 'val_3wet'
# Apply function
df_sub <- df %>% select(ID, Lon, Lat, season_name, val_3wet) %>% tbl_df()
print('To apply calc season function')
df_ssn <- lapply(1:353, function(x) calc_season(df_season = df_sub, df_dly = df_dly, id = x))
df_ssn <- bind_rows(df_ssn)
print('To Make the summary')
# Summarize table by dry days
summ <- df_ssn %>%
filter(sum == 0) %>%
group_by(Year, ID) %>%
summarize(count = n()) %>%
ungroup()
# Write final table
write.csv(summ, paste0('_data/_tbl/_ssnCHIRPS/dry_days_', season_name, '.csv'), row.names = F)
return(summ)
print('Done!')
}
# Load data
df_dly <- read_csv('_data/_tbl/_vlsCHIRPS/_daily/df_all_daily.csv')
df_dly
df_dly
df_5dly <- read_csv('_data/_tbl/_vlsCHIRPS/_daily/df_all_daily5.csv')
df_5dly
season_tb <- read.csv('_tbl/seasons.csv')
season_tb
# Load libraries
require(tidyverse)
require(magrittr)
require(ggplot2)
require(trend)
require(sf)
require(stringr)
require(data.table)
# Initial setup
rm(list = ls())
setwd('W:/_chirps')
options(scipen = 999)
# Load libraries
require(tidyverse)
require(magrittr)
require(ggplot2)
require(trend)
require(sf)
require(stringr)
require(data.table)
# Initial setup
rm(list = ls())
setwd('W:/_chirps')
options(scipen = 999)
cat('\f')
# Function to use
calc_season <- function(df_season, df_dly, id){
# Proof
# df_season <- dfs_3dry
# df_dly <- df_dly
# id <- 1
# Daily
dly <- df_dly %>%
mutate(Month = as.numeric(Month),
Day = as.numeric(Day))
print('To select the season')
# Select by season
ssn <- df_season %>%
filter(ID == id) %>%
extract2(4)
ssn <- season_tb[grep(ssn, season_tb$season, value = F),]
print('To tidy the result')
# Filter and tidy by the season
result <- dly %>%
filter(Month %in% c(extract2(ssn, 2), extract2(ssn, 3), extract2(ssn, 4))) %>%
group_by(Year, ID_5days) %>%
summarize(sum = sum(Value)) %>%
ungroup() %>%
mutate(sum = sum / 10,
ID = id) #the raw values are multiplied by 10
print('Done...!')
return(result)
}
# Load data
shapefile('_shp/_wc/dry_season_wc.shp')
require(magrittr)
# Load libraries
require(raster)
require(rgdal)
require(tidyverse)
require(magrittr)
require(ggplot2)
require(trend)
require(sf)
require(stringr)
require(data.table)
# Initial setup
rm(list = ls())
setwd('W:/_chirps')
options(scipen = 999)
cat('\f')
# Load data
shapefile('_shp/_wc/dry_season_wc.shp')
shapefile('_shp/_wc/dry_6season_wc.shp')
# Load data
dry_yr <- shapefile('_shp/_wc/dry_season_wc.shp')
wet_yr <- shapefile('_shp/_wc/wet_6season_wc.shp')
wet_yr
wet_yr <- shapefile('_shp/_wc/wet_season_wc.shp')
wet_yr
dry_yr
dry_yr
dry_yr@data
# Load data
dry_yr <- shapefile('_shp/_chirps/dry_3season_chirps.shp')
dry_yr
# Initial setup
rm(list = ls())
setwd('W:/_chirps')
options(scipen = 999)
cat('\f')
# Load data
dry_ssn <- shapefile('_shp/_chirps/dry_3season_chirps.shp')
dry_ssn
wet_ssn <- shapefile('_shp/_chirps/wet_3season_chirps.shp')
wet_ssn
# Initial setup
rm(list = ls())
setwd('W:/_chirps')
options(scipen = 999)
cat('\f')
# Load data
dry_ssn_ch <- shapefile('_shp/_chirps/dry_3season_chirps.shp')
wet_ssn_ch <- shapefile('_shp/_chirps/wet_3season_chirps.shp')
dry_ssn_wc <- shapefile('_data/_shp/_pnts/occ_trendDryDays.shp')
dry_ssn_wc
# Analysis Match
shp_ch
# Poor
shp_ch <- dry_ssn_ch
shp_wc <- dry_ssn_wc
shp_ch
shp_wc
shp_wc
shp_ch
# Clean dataframes
shp_ch <- shp_ch %>% dplyr::select(ID_OK, trndDyD)
shp_wc <- shp_wc %>% dplyr::select(ID_OK, trnDayDry)
# Poor
shp_ch <- dry_ssn_ch
shp_wc <- dry_ssn_wc
# Load data
dry_ssn_ch <- read_st('_shp/_chirps/dry_3season_chirps.shp')
require(sf)
# Load data
dry_ssn_ch <- read_st('_shp/_chirps/dry_3season_chirps.shp')
# Load data
dry_ssn_ch <- read_sf('_shp/_chirps/dry_3season_chirps.shp')
dry_ssn_ch
wet_ssn_ch <- read_sf('_shp/_chirps/wet_3season_chirps.shp')
dry_ssn_wc <- read_sf('_data/_shp/_pnts/occ_trendDryDays.shp')
# Poor
shp_ch <- dry_ssn_ch
shp_wc <- dry_ssn_wc
# Clean dataframes
shp_ch <- shp_ch %>% dplyr::select(ID_OK, trndDyD)
shp_ch
shp_ch
shp_wc
shp_wc <- shp_wc %>% dplyr::select(ID_OK, trnDayDry)
shp_wc
shp_wc
shp_wc
# Clean dataframes
shp_ch <- shp_ch %>% dplyr::select(ID_New, trndDyD) %>% rename(ID_OK = ID_New, trend_ch = trndDyD)
shp_wc <- shp_wc %>% dplyr::select(ID_OK, trnDayDry) %>% rename(ID_OK = ID_New,, trend_wc = trnDayDry)
# Poor
shp_ch <- dry_ssn_ch
shp_wc <- dry_ssn_wc
# Clean dataframes
shp_ch <- shp_ch %>% dplyr::select(ID_New, trndDyD) %>% rename(ID_OK = ID_New, trend_ch = trndDyD)
shp_wc <- shp_wc %>% dplyr::select(ID_OK, trnDayDry) %>% rename(ID_OK = ID_New, trend_wc = trnDayDry)
shp_ch
# Poor
shp_ch <- dry_ssn_ch
shp_ch
shp_wc <- dry_ssn_wc
# Clean dataframes
shp_ch <- shp_ch %>% dplyr::select(ID_New, trndDyD) %>% rename(ID_OK = ID_New, trend_ch = trndDyD)
shp_ch
shp_wc <- shp_wc %>% dplyr::select(ID_OK, trnDayDry) %>% rename(ID_OK = ID_New, trend_wc = trnDayDry)
shp_wc
shp_wc <- shp_wc %>% dplyr::select(ID_OK, trnDayDry) %>% rename(trend_wc = trnDayDry)
shp_wc
shp_wc
shp_ch
shp_ch[shp_ch$trend_ch %in% shp_wc$trend_wc]
shp_ch$trend_ch %in% shp_wc$trend_wc
cbind(shp_ch, shp_wc)
setdiff(shp_ch$trend_ch, shp_wc$trend_wc)
example(setdiff)
#
x = data.table(c(1,2,2,2,3,4,4))
y = data.table(c(2,3,4,4,4,5))
x
y
fintersect(x, y)
fintersect(x, y, all=TRUE)
fsetequal(x, y)
x = data.table(c(1:10))
y = data.table(c(1:10))
fsetequal(x, y)
example(setdif)
example(setdif)
example(setdiff)
!(shp_ch$trend_ch %in% shp_wc$trend_wc)
fintersect(x, y)
fintersect(x, y, all=TRUE)
x = data.table(c(1:10))
y = data.table(c(1:10))
fintersect(x, y)
fintersect(x, y, all=TRUE)
funion(x, y)
funion(x, y, all=TRUE)
diff <- !(shp_ch$trend_ch %in% shp_wc$trend_wc)
diff
length(diff)
which(diff == FALSE)
which(diff == FALSE) %>% length()
which(diff == TRUE) %>% length()
nF <- which(diff == FALSE) %>% length()
nT <- which(diff == TRUE) %>% length()
nF
nT
# Apply Function
match_ssn(shp_ch = dry_ssn_ch, shp_wc = dry_ssn_wc)
match_ssn <- function(shp_ch, shp_wc){
# Clean dataframes
shp_ch <- shp_ch %>% dplyr::select(ID_New, trndDyD) %>% rename(ID_OK = ID_New, trend_ch = trndDyD)
shp_wc <- shp_wc %>% dplyr::select(ID_OK, trnDayDry) %>% rename(trend_wc = trnDayDry)
diff <- !(shp_ch$trend_ch %in% shp_wc$trend_wc)
nF <- which(diff == FALSE) %>% length()
nT <- which(diff == TRUE) %>% length()
return(c(diff, nF, nT))
}
# Apply Function
match_ssn(shp_ch = dry_ssn_ch, shp_wc = dry_ssn_wc)
# Apply Function
dry <- match_ssn(shp_ch = dry_ssn_ch, shp_wc = dry_ssn_wc)
dry
match_ssn <- function(shp_ch, shp_wc){
# Clean dataframes
shp_ch <- shp_ch %>% dplyr::select(ID_New, trndDyD) %>% rename(ID_OK = ID_New, trend_ch = trndDyD)
shp_wc <- shp_wc %>% dplyr::select(ID_OK, trnDayDry) %>% rename(trend_wc = trnDayDry)
diff <- !(shp_ch$trend_ch %in% shp_wc$trend_wc)
nF <- which(diff == FALSE) %>% length()
nT <- which(diff == TRUE) %>% length()
return(list(diff, nF, nT))
}
# Apply Function
dry <- match_ssn(shp_ch = dry_ssn_ch, shp_wc = dry_ssn_wc)
dry
match_ssn <- function(shp_ch, shp_wc){
# Clean dataframes
shp_ch <- shp_ch %>% dplyr::select(ID_New, trndDyD) %>% rename(ID_OK = ID_New, trend_ch = trndDyD)
shp_wc <- shp_wc %>% dplyr::select(ID_OK, trnDayDry) %>% rename(trend_wc = trnDayDry)
# Making the match
diff <- !(shp_ch$trend_ch %in% shp_wc$trend_wc)
nF <- which(diff == FALSE) %>% length()
nT <- which(diff == TRUE) %>% length()
return(list(diff, nF, nT))
}
dry <- match_ssn(shp_ch = wet_ssn_ch, shp_wc = dry_ssn_wc)
dry
# Load libraries
require(raster)
require(rgdal)
require(tidyverse)
require(magrittr)
require(ggplot2)
require(trend)
require(sf)
require(stringr)
require(data.table)
require(sf)
# Initial setup
rm(list = ls())
setwd('W:/_chirps')
options(scipen = 999)
cat('\f')
# Function to use
match_ssn <- function(shp_ch, shp_wc){
# Clean dataframes
shp_ch <- shp_ch %>% dplyr::select(ID_New, trndDyD) %>% rename(ID_OK = ID_New, trend_ch = trndDyD)
shp_wc <- shp_wc %>% dplyr::select(ID_OK, trnDayDry) %>% rename(trend_wc = trnDayDry)
# Making the match
diff <- !(shp_ch$trend_ch %in% shp_wc$trend_wc)
nF <- which(diff == FALSE) %>% length()
nT <- which(diff == TRUE) %>% length()
return(list(diff, nF, nT))
}
# Load data
dry_ssn_ch <- read_sf('_shp/_chirps/dry_3season_chirps.shp')
wet_ssn_ch <- read_sf('_shp/_chirps/wet_3season_chirps.shp')
dry_ssn_wc <- read_sf('_data/_shp/_pnts/occ_trendDryDays.shp')
# Apply Function
dry <- match_ssn(shp_ch = dry_ssn_ch, shp_wc = dry_ssn_wc)
wet <- match_ssn(shp_ch = wet_ssn_ch, shp_wc = dry_ssn_wc)
wet
dry
dry
wet
args(mean)
args(match_ssn)
formals
formals(match_ssn)
formals(save)
save(dry_ssn_ch, file = '_rData/dry_3season_chirps.rData')
save(wet_ssn_ch, file = '_rData/wet_3season_chirps.rData')
save(dry_ssn_wc, file = '_rData/dry_season_wc.rData')
dir.create('_rData')
save(dry_ssn_ch, file = '_rData/dry_3season_chirps.rData')
save(wet_ssn_ch, file = '_rData/wet_3season_chirps.rData')
save(dry_ssn_wc, file = '_rData/dry_season_wc.rData')
# Initial setup
rm(list = ls())
setwd('W:/_chirps')
options(scipen = 999)
cat('\f')
# Function to use
match_ssn <- function(shp_ch, shp_wc){
# Clean dataframes
shp_ch <- shp_ch %>% dplyr::select(ID_New, trndDyD) %>% rename(ID_OK = ID_New, trend_ch = trndDyD)
shp_wc <- shp_wc %>% dplyr::select(ID_OK, trnDayDry) %>% rename(trend_wc = trnDayDry)
# Making the match
diff <- !(shp_ch$trend_ch %in% shp_wc$trend_wc)
nF <- which(diff == FALSE) %>% length()
nT <- which(diff == TRUE) %>% length()
return(list(diff, nF, nT))
}
# Or
load(file = '_rData/dry_3season_chirps.rData')
load(file = '_rData/wet_3season_chirps.rData')
load(file = '_rData/dry_season_wc.rData')
# Apply Function
dry <- match_ssn(shp_ch = dry_ssn_ch, shp_wc = dry_ssn_wc)
wet <- match_ssn(shp_ch = wet_ssn_ch, shp_wc = dry_ssn_wc)
dry
wet
# Apply Function
dry <- match_ssn(shp_ch = dry_ssn_ch, shp_wc = dry_ssn_wc)
dry
wet
